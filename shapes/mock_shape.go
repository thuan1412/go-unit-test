// Code generated by go-mockgen 1.1.2; DO NOT EDIT.

package shapes

import "sync"

// MockShape is a mock implementation of the Shape interface (from the
// package unit-test/shapes) used for unit testing.
type MockShape struct {
	// AreaFunc is an instance of a mock function object controlling the
	// behavior of the method Area.
	AreaFunc *ShapeAreaFunc
}

// NewMockShape creates a new mock of the Shape interface. All methods
// return zero values for all results, unless overwritten.
func NewMockShape() *MockShape {
	return &MockShape{
		AreaFunc: &ShapeAreaFunc{
			defaultHook: func() float64 {
				return 0
			},
		},
	}
}

// NewMockShapeFrom creates a new mock of the MockShape interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockShapeFrom(i Shape) *MockShape {
	return &MockShape{
		AreaFunc: &ShapeAreaFunc{
			defaultHook: i.Area,
		},
	}
}

// ShapeAreaFunc describes the behavior when the Area method of the parent
// MockShape instance is invoked.
type ShapeAreaFunc struct {
	defaultHook func() float64
	hooks       []func() float64
	history     []ShapeAreaFuncCall
	mutex       sync.Mutex
}

// Area delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockShape) Area() float64 {
	r0 := m.AreaFunc.nextHook()()
	m.AreaFunc.appendCall(ShapeAreaFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Area method of the
// parent MockShape instance is invoked and the hook queue is empty.
func (f *ShapeAreaFunc) SetDefaultHook(hook func() float64) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Area method of the parent MockShape instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ShapeAreaFunc) PushHook(hook func() float64) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ShapeAreaFunc) SetDefaultReturn(r0 float64) {
	f.SetDefaultHook(func() float64 {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ShapeAreaFunc) PushReturn(r0 float64) {
	f.PushHook(func() float64 {
		return r0
	})
}

func (f *ShapeAreaFunc) nextHook() func() float64 {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ShapeAreaFunc) appendCall(r0 ShapeAreaFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ShapeAreaFuncCall objects describing the
// invocations of this function.
func (f *ShapeAreaFunc) History() []ShapeAreaFuncCall {
	f.mutex.Lock()
	history := make([]ShapeAreaFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ShapeAreaFuncCall is an object that describes an invocation of method
// Area on an instance of MockShape.
type ShapeAreaFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 float64
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ShapeAreaFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ShapeAreaFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
